{
  "address": "0x75dB1c4FFA162a59556FB9774667D5e7c4fFE307",
  "abi": [],
  "transactionHash": "0x3bc25e32739db5b3d3fc6e4f23649e79ed8d0afed47a1fdffe370f768e6f1544",
  "receipt": {
    "to": null,
    "from": "0x4f071924D66BBC71A5254217893CC7D49938B1c4",
    "contractAddress": "0x75dB1c4FFA162a59556FB9774667D5e7c4fFE307",
    "transactionIndex": 5,
    "gasUsed": "1231246",
    "logsBloom": "0x
    "blockHash": "0xe9c7e06a3092ddab59a707016bd6e8f9b561aa682c02857d51d3d276e0bbfe93",
    "transactionHash": "0x3bc25e32739db5b3d3fc6e4f23649e79ed8d0afed47a1fdffe370f768e6f1544",
    "logs": [],
    "blockNumber": 2557154,
    "cumulativeGasUsed": "1512347",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9376b180cdf335e671a4f9bee41a94d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategy/base/DeployStrategyTokenLogic.sol\":\"DeployStrategyTokenLogic\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363931393033353635393632\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb62681ccbf84aef125665cfdfc0bf13b532925b1a520d6c935913560f539a31b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/ISupplyToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.7.0;\\n\\ninterface ISupplyToken {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbc722f52efe85caaec0a7b4a2bb13a8293ee289f5954da4c9916811226ce2610\",\"license\":\"agpl-3.0\"},\"src/strategy/base/DeployStrategyTokenLogic.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../tokenization/SupplyToken.sol\\\";\\n\\nlibrary DeployStrategyTokenLogic {\\n    function deployStrategyToken(address _marginTokenAddress, address _tokenAddress) external returns (address) {\\n        IERC20Metadata marginToken = IERC20Metadata(_marginTokenAddress);\\n        IERC20Metadata erc20 = IERC20Metadata(_tokenAddress);\\n\\n        return address(\\n            new SupplyToken(\\n                address(this),\\n                string.concat(\\n                    string.concat(\\\"Predy-ST-\\\", erc20.name()),\\n                    string.concat(\\\"-\\\", marginToken.name())\\n                ),\\n                string.concat(\\n                    string.concat(\\\"pst\\\", erc20.symbol()),\\n                    string.concat(\\\"-\\\", marginToken.symbol())\\n                ),\\n                marginToken.decimals()\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x43454b7328efa5e6b1de7345b3e9912a287efd219d131d2ac72299eca5333bae\",\"license\":\"agpl-3.0\"},\"src/tokenization/SupplyToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/ISupplyToken.sol\\\";\\n\\ncontract SupplyToken is ERC20, ISupplyToken {\\n    address immutable controller;\\n    uint8 _decimals;\\n\\n    modifier onlyController() {\\n        require(controller == msg.sender, \\\"ST0\\\");\\n        _;\\n    }\\n\\n    constructor(address _controller, string memory _name, string memory _symbol, uint8 __decimals)\\n        ERC20(_name, _symbol)\\n    {\\n        controller = _controller;\\n        _decimals = __decimals;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function mint(address account, uint256 amount) external virtual override onlyController {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external virtual override onlyController {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc8e9cac8ef8497a7c26cbeb806057037299c16408639562e52409d1446743537\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x61155a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610620000375760003560e01c8063fbe29ddb146200003c575b600080fd5b8180156200004957600080fd5b50620000616200005b366004620003c5565b6200007d565b6040516001600160a01b03909116815260200160405180910390f35b600080839050600083905030816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000f2919081019062000439565b604051602001620001049190620004f2565b604051602081830303815290604052836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000152573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200017c919081019062000439565b6040516020016200018e919062000525565b60408051601f1981840301815290829052620001ae929160200162000550565b604051602081830303815290604052826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000226919081019062000439565b60405160200162000238919062000583565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000286573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002b0919081019062000439565b604051602001620002c2919062000525565b60408051601f1981840301815290829052620002e2929160200162000550565b604051602081830303815290604052846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000330573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003569190620005b0565b60405162000364906200039a565b6200037394939291906200060a565b604051809103906000f08015801562000390573d6000803e3d6000fd5b5095945050505050565b610ecb806200065a83390190565b80356001600160a01b0381168114620003c057600080fd5b919050565b60008060408385031215620003d957600080fd5b620003e483620003a8565b9150620003f460208401620003a8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200043057818101518382015260200162000416565b50506000910152565b6000602082840312156200044c57600080fd5b815167ffffffffffffffff808211156200046557600080fd5b818401915084601f8301126200047a57600080fd5b8151818111156200048f576200048f620003fd565b604051601f8201601f19908116603f01168101908382118183101715620004ba57620004ba620003fd565b81604052828152876020848701011115620004d457600080fd5b620004e783602083016020880162000413565b979650505050505050565b6850726564792d53542d60b81b8152600082516200051881600985016020870162000413565b9190910160090192915050565b602d60f81b8152600082516200054381600185016020870162000413565b9190910160010192915050565b600083516200056481846020880162000413565b8351908301906200057a81836020880162000413565b01949350505050565b621c1cdd60ea1b815260008251620005a381600385016020870162000413565b9190910160030192915050565b600060208284031215620005c357600080fd5b815160ff81168114620005d557600080fd5b9392505050565b60008151808452620005f681602086016020860162000413565b601f01601f19169290920160200192915050565b6001600160a01b03851681526080602082018190526000906200063090830186620005dc565b8281036040840152620006448186620005dc565b91505060ff831660608301529594505050505056fe60a06040523480156200001157600080fd5b5060405162000ecb38038062000ecb833981016040819052620000349162000145565b8282600362000044838262000278565b50600462000053828262000278565b5050506001600160a01b039390931660805250506005805460ff191660ff90921691909117905562000344565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b816040528381526020925086838588010111156200010d57600080fd5b600091505b8382101562000131578582018301518183018401529082019062000112565b600093810190920192909252949350505050565b600080600080608085870312156200015c57600080fd5b84516001600160a01b03811681146200017457600080fd5b60208601519094506001600160401b03808211156200019257600080fd5b620001a08883890162000096565b94506040870151915080821115620001b757600080fd5b50620001c68782880162000096565b925050606085015160ff81168114620001de57600080fd5b939692955090935050565b600181811c90821680620001fe57607f821691505b6020821081036200021f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027357600081815260208120601f850160051c810160208610156200024e5750805b601f850160051c820191505b818110156200026f578281556001016200025a565b5050505b505050565b81516001600160401b0381111562000294576200029462000080565b620002ac81620002a58454620001e9565b8462000225565b602080601f831160018114620002e45760008415620002cb5750858301515b600019600386901b1c1916600185901b1785556200026f565b600085815260208120601f198616915b828110156200031557888601518255948401946001909101908401620002f4565b5085821015620003345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610b6462000367600039600081816102e801526103680152610b646000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101a8578063a457c2d7146101bb578063a9059cbb146101ce578063dd62ed3e146101e157600080fd5b806340c10f191461016257806370a082311461017757806395d89b41146101a057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063395093511461014f575b600080fd5b6100dc6101f4565b6040516100e991906109ae565b60405180910390f35b610105610100366004610a18565b610286565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610a42565b6102a0565b60055460405160ff90911681526020016100e9565b61010561015d366004610a18565b6102c4565b610175610170366004610a18565b6102e6565b005b610119610185366004610a7e565b6001600160a01b031660009081526020819052604090205490565b6100dc610357565b6101756101b6366004610a18565b610366565b6101056101c9366004610a18565b6103ce565b6101056101dc366004610a18565b610449565b6101196101ef366004610aa0565b610457565b60606003805461020390610ad3565b80601f016020809104026020016040519081016040528092919081815260200182805461022f90610ad3565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050905090565b600033610294818585610482565b60019150505b92915050565b6000336102ae8582856105a7565b6102b9858585610621565b506001949350505050565b6000336102948185856102d78383610457565b6102e19190610b0d565b610482565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103495760405162461bcd60e51b815260206004820152600360248201526205354360ec1b60448201526064015b60405180910390fd5b61035382826107c5565b5050565b60606004805461020390610ad3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103c45760405162461bcd60e51b815260206004820152600360248201526205354360ec1b6044820152606401610340565b6103538282610884565b600033816103dc8286610457565b90508381101561043c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610340565b6102b98286868403610482565b600033610294818585610621565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610340565b6001600160a01b0382166105455760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610340565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b38484610457565b9050600019811461061b578181101561060e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610340565b61061b8484848403610482565b50505050565b6001600160a01b0383166106855760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610340565b6001600160a01b0382166106e75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610340565b6001600160a01b0383166000908152602081905260409020548181101561075f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610340565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361061b565b6001600160a01b03821661081b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610340565b806002600082825461082d9190610b0d565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166108e45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610340565b6001600160a01b038216600090815260208190526040902054818110156109585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610340565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161059a565b600060208083528351808285015260005b818110156109db578581018301518582016040015282016109bf565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a1357600080fd5b919050565b60008060408385031215610a2b57600080fd5b610a34836109fc565b946020939093013593505050565b600080600060608486031215610a5757600080fd5b610a60846109fc565b9250610a6e602085016109fc565b9150604084013590509250925092565b600060208284031215610a9057600080fd5b610a99826109fc565b9392505050565b60008060408385031215610ab357600080fd5b610abc836109fc565b9150610aca602084016109fc565b90509250929050565b600181811c90821680610ae757607f821691505b602082108103610b0757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029a57634e487b7160e01b600052601160045260246000fdfea26469706673582212204273f82326395b92dabb12634bdd369620562a16ffbeccc43193f4d8fda8873f64736f6c63430008130033a26469706673582212204965df6d8d925f7297df7d9cf70f48a5051f69f725f2ed757797a2f88f1ba35864736f6c63430008130033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610620000375760003560e01c8063fbe29ddb146200003c575b600080fd5b8180156200004957600080fd5b50620000616200005b366004620003c5565b6200007d565b6040516001600160a01b03909116815260200160405180910390f35b600080839050600083905030816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000f2919081019062000439565b604051602001620001049190620004f2565b604051602081830303815290604052836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000152573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200017c919081019062000439565b6040516020016200018e919062000525565b60408051601f1981840301815290829052620001ae929160200162000550565b604051602081830303815290604052826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000226919081019062000439565b60405160200162000238919062000583565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000286573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002b0919081019062000439565b604051602001620002c2919062000525565b60408051601f1981840301815290829052620002e2929160200162000550565b604051602081830303815290604052846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000330573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003569190620005b0565b60405162000364906200039a565b6200037394939291906200060a565b604051809103906000f08015801562000390573d6000803e3d6000fd5b5095945050505050565b610ecb806200065a83390190565b80356001600160a01b0381168114620003c057600080fd5b919050565b60008060408385031215620003d957600080fd5b620003e483620003a8565b9150620003f460208401620003a8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200043057818101518382015260200162000416565b50506000910152565b6000602082840312156200044c57600080fd5b815167ffffffffffffffff808211156200046557600080fd5b818401915084601f8301126200047a57600080fd5b8151818111156200048f576200048f620003fd565b604051601f8201601f19908116603f01168101908382118183101715620004ba57620004ba620003fd565b81604052828152876020848701011115620004d457600080fd5b620004e783602083016020880162000413565b979650505050505050565b6850726564792d53542d60b81b8152600082516200051881600985016020870162000413565b9190910160090192915050565b602d60f81b8152600082516200054381600185016020870162000413565b9190910160010192915050565b600083516200056481846020880162000413565b8351908301906200057a81836020880162000413565b01949350505050565b621c1cdd60ea1b815260008251620005a381600385016020870162000413565b9190910160030192915050565b600060208284031215620005c357600080fd5b815160ff81168114620005d557600080fd5b9392505050565b60008151808452620005f681602086016020860162000413565b601f01601f19169290920160200192915050565b6001600160a01b03851681526080602082018190526000906200063090830186620005dc565b8281036040840152620006448186620005dc565b91505060ff831660608301529594505050505056fe60a06040523480156200001157600080fd5b5060405162000ecb38038062000ecb833981016040819052620000349162000145565b8282600362000044838262000278565b50600462000053828262000278565b5050506001600160a01b039390931660805250506005805460ff191660ff90921691909117905562000344565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000a857600080fd5b81516001600160401b0380821115620000c557620000c562000080565b604051601f8301601f19908116603f01168101908282118183101715620000f057620000f062000080565b816040528381526020925086838588010111156200010d57600080fd5b600091505b8382101562000131578582018301518183018401529082019062000112565b600093810190920192909252949350505050565b600080600080608085870312156200015c57600080fd5b84516001600160a01b03811681146200017457600080fd5b60208601519094506001600160401b03808211156200019257600080fd5b620001a08883890162000096565b94506040870151915080821115620001b757600080fd5b50620001c68782880162000096565b925050606085015160ff81168114620001de57600080fd5b939692955090935050565b600181811c90821680620001fe57607f821691505b6020821081036200021f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027357600081815260208120601f850160051c810160208610156200024e5750805b601f850160051c820191505b818110156200026f578281556001016200025a565b5050505b505050565b81516001600160401b0381111562000294576200029462000080565b620002ac81620002a58454620001e9565b8462000225565b602080601f831160018114620002e45760008415620002cb5750858301515b600019600386901b1c1916600185901b1785556200026f565b600085815260208120601f198616915b828110156200031557888601518255948401946001909101908401620002f4565b5085821015620003345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610b6462000367600039600081816102e801526103680152610b646000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101a8578063a457c2d7146101bb578063a9059cbb146101ce578063dd62ed3e146101e157600080fd5b806340c10f191461016257806370a082311461017757806395d89b41146101a057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a578063395093511461014f575b600080fd5b6100dc6101f4565b6040516100e991906109ae565b60405180910390f35b610105610100366004610a18565b610286565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610a42565b6102a0565b60055460405160ff90911681526020016100e9565b61010561015d366004610a18565b6102c4565b610175610170366004610a18565b6102e6565b005b610119610185366004610a7e565b6001600160a01b031660009081526020819052604090205490565b6100dc610357565b6101756101b6366004610a18565b610366565b6101056101c9366004610a18565b6103ce565b6101056101dc366004610a18565b610449565b6101196101ef366004610aa0565b610457565b60606003805461020390610ad3565b80601f016020809104026020016040519081016040528092919081815260200182805461022f90610ad3565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050905090565b600033610294818585610482565b60019150505b92915050565b6000336102ae8582856105a7565b6102b9858585610621565b506001949350505050565b6000336102948185856102d78383610457565b6102e19190610b0d565b610482565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103495760405162461bcd60e51b815260206004820152600360248201526205354360ec1b60448201526064015b60405180910390fd5b61035382826107c5565b5050565b60606004805461020390610ad3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146103c45760405162461bcd60e51b815260206004820152600360248201526205354360ec1b6044820152606401610340565b6103538282610884565b600033816103dc8286610457565b90508381101561043c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610340565b6102b98286868403610482565b600033610294818585610621565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104e45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610340565b6001600160a01b0382166105455760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610340565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105b38484610457565b9050600019811461061b578181101561060e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610340565b61061b8484848403610482565b50505050565b6001600160a01b0383166106855760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610340565b6001600160a01b0382166106e75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610340565b6001600160a01b0383166000908152602081905260409020548181101561075f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610340565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361061b565b6001600160a01b03821661081b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610340565b806002600082825461082d9190610b0d565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166108e45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610340565b6001600160a01b038216600090815260208190526040902054818110156109585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610340565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161059a565b600060208083528351808285015260005b818110156109db578581018301518582016040015282016109bf565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a1357600080fd5b919050565b60008060408385031215610a2b57600080fd5b610a34836109fc565b946020939093013593505050565b600080600060608486031215610a5757600080fd5b610a60846109fc565b9250610a6e602085016109fc565b9150604084013590509250925092565b600060208284031215610a9057600080fd5b610a99826109fc565b9392505050565b60008060408385031215610ab357600080fd5b610abc836109fc565b9150610aca602084016109fc565b90509250929050565b600181811c90821680610ae757607f821691505b602082108103610b0757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029a57634e487b7160e01b600052601160045260246000fdfea26469706673582212204273f82326395b92dabb12634bdd369620562a16ffbeccc43193f4d8fda8873f64736f6c63430008130033a26469706673582212204965df6d8d925f7297df7d9cf70f48a5051f69f725f2ed757797a2f88f1ba35864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}